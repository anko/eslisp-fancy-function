(= prelude (require "prelude-ls"))
(= break-list prelude.break-list)

(= is-splat (function (x) (return (== 0 (x.atom.indexOf "...")))))

(:= module.exports
    (function
      ()

      (= prepend-statements (array))

      (= args (Array.prototype.slice.call arguments 0))
      (= function-args args.0)
      (= function-body (args.slice 1))


      (= break-results (break-list is-splat function-args))

      (= before-splat break-results.0)

      (= splat-and-after break-results.1)

      (= n-splats (. (splat-and-after.filter is-splat) length))
      (if (> n-splats 1)
        ( (throw (Error "too many splats in function arguments (expected <=1)")) ))

      (= splat splat-and-after.0)
      (if splat
        (
         (= after-splat (splat-and-after.slice 1))

         (= splat-name (splat.atom.slice 3))
         (= splat-start before-splat.length)
         (= splat-end (- function-args.length after-splat.length))
         (= splat-slice-call `(= ,(object atom splat-name) ((. Array prototype slice call) arguments ,splat-start ,splat-end)))

         (prepend-statements.push splat-slice-call)

         (after-splat.for-each
           (function (x i)
                     (prepend-statements.push `(= ,x (. arguments ,(+ i before-splat.length 1))))))

         ; a b c
         ; ...a
         ; a ...b
         ; a ...b c
        ))

      (return `(,(object atom "function") ,before-splat ,@prepend-statements ,@function-body))
))
