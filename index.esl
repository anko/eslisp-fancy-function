(macro __camelify (require "eslisp-camelify"))
(__camelify
(macro __propertify (require "eslisp-propertify"))
(__propertify

(= prelude (require "prelude-ls"))
(= break-list prelude.break-list)

(= is-splat (function (x) (return (== 0 (x.atom.indexOf "...")))))

(:= module.exports
    (function
      ()

      (= prepend-statements (array))

      (= args (Array.prototype.slice.call arguments 0))
      (= function-args args.0)
      (= function-body (args.slice 1))


      (= break-results (break-list is-splat function-args))

      (= non-splat-function-args break-results.0)
      (= splat-function-arg-names (break-results.1.map
                                    (function (x) (return (x.atom.slice 3)))))

      (if (> (. (splat-function-arg-names.filter (function
                                                   (x)
                                                   (return is-splat x)))
                length)
             1)
        ( (throw (Error "too many splats in function arguments (expected <=1)")) ))

      (= n non-splat-function-args.length)

      ; a b c
      ; ...a
      ; a ...b
      ; a ...b c

      (return `(,(object atom "function") ,non-splat-function-args ,@prepend-statements ,@function-body))
))

)
)
